{"$message_type":"diagnostic","message":"the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountMetas` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/instructions/deposit.rs","byte_start":1675,"byte_end":1935,"line_start":63,"line_end":67,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        spl_account_compression::cpi::accounts::Modify {","highlight_start":9,"highlight_end":57},{"text":"            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),","highlight_start":1,"highlight_end":69},{"text":"            authority: ctx.accounts.tree_authority.to_account_info(),","highlight_start":1,"highlight_end":70},{"text":"            noop: ctx.accounts.noop_program.to_account_info(),","highlight_start":1,"highlight_end":63},{"text":"        },","highlight_start":1,"highlight_end":10}],"label":"the trait `anchor_lang::ToAccountMetas` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instructions/deposit.rs","byte_start":1578,"byte_end":1605,"line_start":61,"line_end":61,"column_start":19,"column_end":46,"is_primary":false,"text":[{"text":"    let cpi_ctx = CpiContext::new_with_signer(","highlight_start":19,"highlight_end":46}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Accounts)]","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-derive-accounts-0.29.0/src/lib.rs","byte_start":29231,"byte_end":29297,"line_start":633,"line_end":633,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub fn derive_anchor_deserialize(item: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `anchor_lang` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `anchor_lang::ToAccountMetas`:\n  AccountLoader<'info, T>\n  AccountMeta\n  Box<T>\n  CreateNonceAccount<'info>\n  CreateNonceAccountWithSeed<'info>\n  Interface<'info, T>\n  InterfaceAccount<'info, T>\n  Option<T>\nand 73 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `anchor_lang::context::CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":6178,"byte_end":6193,"line_start":195,"line_end":195,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"    pub fn new_with_signer(","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5892,"byte_end":5906,"line_start":183,"line_end":183,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    T: ToAccountMetas + ToAccountInfos<'info>,","highlight_start":8,"highlight_end":22}],"label":"required by this bound in `CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountMetas` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instructions/deposit.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let cpi_ctx = CpiContext::new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        ctx.accounts.compression_program.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spl_account_compression::cpi::accounts::Modify {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            authority: ctx.accounts.tree_authority.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            noop: ctx.accounts.noop_program.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `anchor_lang::ToAccountMetas` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs:96:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Accounts)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `anchor_lang` are being used?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `anchor_lang::ToAccountMetas`:\u001b[0m\n\u001b[0m              AccountLoader<'info, T>\u001b[0m\n\u001b[0m              AccountMeta\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              CreateNonceAccount<'info>\u001b[0m\n\u001b[0m              CreateNonceAccountWithSeed<'info>\u001b[0m\n\u001b[0m              Interface<'info, T>\u001b[0m\n\u001b[0m              InterfaceAccount<'info, T>\u001b[0m\n\u001b[0m              Option<T>\u001b[0m\n\u001b[0m            and 73 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `anchor_lang::context::CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs:183:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ToAccountMetas + ToAccountInfos<'info>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountInfos<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/instructions/deposit.rs","byte_start":1675,"byte_end":1935,"line_start":63,"line_end":67,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        spl_account_compression::cpi::accounts::Modify {","highlight_start":9,"highlight_end":57},{"text":"            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),","highlight_start":1,"highlight_end":69},{"text":"            authority: ctx.accounts.tree_authority.to_account_info(),","highlight_start":1,"highlight_end":70},{"text":"            noop: ctx.accounts.noop_program.to_account_info(),","highlight_start":1,"highlight_end":63},{"text":"        },","highlight_start":1,"highlight_end":10}],"label":"the trait `anchor_lang::ToAccountInfos<'_>` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instructions/deposit.rs","byte_start":1578,"byte_end":1605,"line_start":61,"line_end":61,"column_start":19,"column_end":46,"is_primary":false,"text":[{"text":"    let cpi_ctx = CpiContext::new_with_signer(","highlight_start":19,"highlight_end":46}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Accounts)]","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-derive-accounts-0.29.0/src/lib.rs","byte_start":29231,"byte_end":29297,"line_start":633,"line_end":633,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub fn derive_anchor_deserialize(item: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `anchor_lang` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `anchor_lang::ToAccountInfos<'info>`:\n  AccountLoader<'info, T>\n  Box<T>\n  CreateNonceAccount<'info>\n  CreateNonceAccountWithSeed<'info>\n  Interface<'info, T>\n  InterfaceAccount<'info, T>\n  Option<T>\n  Vec<T>\nand 50 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `anchor_lang::context::CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":6178,"byte_end":6193,"line_start":195,"line_end":195,"column_start":12,"column_end":27,"is_primary":false,"text":[{"text":"    pub fn new_with_signer(","highlight_start":12,"highlight_end":27}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5909,"byte_end":5930,"line_start":183,"line_end":183,"column_start":25,"column_end":46,"is_primary":true,"text":[{"text":"    T: ToAccountMetas + ToAccountInfos<'info>,","highlight_start":25,"highlight_end":46}],"label":"required by this bound in `CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountInfos<'_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instructions/deposit.rs:63:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let cpi_ctx = CpiContext::new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        ctx.accounts.compression_program.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spl_account_compression::cpi::accounts::Modify {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            authority: ctx.accounts.tree_authority.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            noop: ctx.accounts.noop_program.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        },\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `anchor_lang::ToAccountInfos<'_>` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs:96:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Accounts)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `anchor_lang` are being used?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `anchor_lang::ToAccountInfos<'info>`:\u001b[0m\n\u001b[0m              AccountLoader<'info, T>\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              CreateNonceAccount<'info>\u001b[0m\n\u001b[0m              CreateNonceAccountWithSeed<'info>\u001b[0m\n\u001b[0m              Interface<'info, T>\u001b[0m\n\u001b[0m              InterfaceAccount<'info, T>\u001b[0m\n\u001b[0m              Option<T>\u001b[0m\n\u001b[0m              Vec<T>\u001b[0m\n\u001b[0m            and 50 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `anchor_lang::context::CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs:183:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ToAccountMetas + ToAccountInfos<'info>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CpiContext::<'a, 'b, 'c, 'info, T>::new_with_signer`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this associated function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountInfos<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/instructions/deposit.rs","byte_start":1578,"byte_end":1588,"line_start":61,"line_end":61,"column_start":19,"column_end":29,"is_primary":true,"text":[{"text":"    let cpi_ctx = CpiContext::new_with_signer(","highlight_start":19,"highlight_end":29}],"label":"the trait `anchor_lang::ToAccountInfos<'_>` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Accounts)]","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-derive-accounts-0.29.0/src/lib.rs","byte_start":29231,"byte_end":29297,"line_start":633,"line_end":633,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub fn derive_anchor_deserialize(item: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `anchor_lang` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `anchor_lang::ToAccountInfos<'info>`:\n  AccountLoader<'info, T>\n  Box<T>\n  CreateNonceAccount<'info>\n  CreateNonceAccountWithSeed<'info>\n  Interface<'info, T>\n  InterfaceAccount<'info, T>\n  Option<T>\n  Vec<T>\nand 50 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `anchor_lang::context::CpiContext`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5573,"byte_end":5583,"line_start":171,"line_end":171,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct CpiContext<'a, 'b, 'c, 'info, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5636,"byte_end":5657,"line_start":173,"line_end":173,"column_start":25,"column_end":46,"is_primary":true,"text":[{"text":"    T: ToAccountMetas + ToAccountInfos<'info>,","highlight_start":25,"highlight_end":46}],"label":"required by this bound in `CpiContext`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountInfos<'_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instructions/deposit.rs:61:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let cpi_ctx = CpiContext::new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `anchor_lang::ToAccountInfos<'_>` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs:96:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Accounts)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `anchor_lang` are being used?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `anchor_lang::ToAccountInfos<'info>`:\u001b[0m\n\u001b[0m              AccountLoader<'info, T>\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              CreateNonceAccount<'info>\u001b[0m\n\u001b[0m              CreateNonceAccountWithSeed<'info>\u001b[0m\n\u001b[0m              Interface<'info, T>\u001b[0m\n\u001b[0m              InterfaceAccount<'info, T>\u001b[0m\n\u001b[0m              Option<T>\u001b[0m\n\u001b[0m              Vec<T>\u001b[0m\n\u001b[0m            and 50 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `anchor_lang::context::CpiContext`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs:173:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CpiContext<'a, 'b, 'c, 'info, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ToAccountMetas + ToAccountInfos<'info>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CpiContext`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountMetas` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/instructions/deposit.rs","byte_start":1578,"byte_end":1955,"line_start":61,"line_end":69,"column_start":19,"column_end":6,"is_primary":true,"text":[{"text":"    let cpi_ctx = CpiContext::new_with_signer(","highlight_start":19,"highlight_end":47},{"text":"        ctx.accounts.compression_program.to_account_info(),","highlight_start":1,"highlight_end":60},{"text":"        spl_account_compression::cpi::accounts::Modify {","highlight_start":1,"highlight_end":57},{"text":"            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),","highlight_start":1,"highlight_end":69},{"text":"            authority: ctx.accounts.tree_authority.to_account_info(),","highlight_start":1,"highlight_end":70},{"text":"            noop: ctx.accounts.noop_program.to_account_info(),","highlight_start":1,"highlight_end":63},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        &[],","highlight_start":1,"highlight_end":13},{"text":"    );","highlight_start":1,"highlight_end":6}],"label":"the trait `anchor_lang::ToAccountMetas` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Accounts)]","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-derive-accounts-0.29.0/src/lib.rs","byte_start":29231,"byte_end":29297,"line_start":633,"line_end":633,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub fn derive_anchor_deserialize(item: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `anchor_lang` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `anchor_lang::ToAccountMetas`:\n  AccountLoader<'info, T>\n  AccountMeta\n  Box<T>\n  CreateNonceAccount<'info>\n  CreateNonceAccountWithSeed<'info>\n  Interface<'info, T>\n  InterfaceAccount<'info, T>\n  Option<T>\nand 73 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `anchor_lang::context::CpiContext`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5573,"byte_end":5583,"line_start":171,"line_end":171,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct CpiContext<'a, 'b, 'c, 'info, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5619,"byte_end":5633,"line_start":173,"line_end":173,"column_start":8,"column_end":22,"is_primary":true,"text":[{"text":"    T: ToAccountMetas + ToAccountInfos<'info>,","highlight_start":8,"highlight_end":22}],"label":"required by this bound in `CpiContext`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountMetas` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instructions/deposit.rs:61:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let cpi_ctx = CpiContext::new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m___________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ctx.accounts.compression_program.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spl_account_compression::cpi::accounts::Modify {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &[],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `anchor_lang::ToAccountMetas` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs:96:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Accounts)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `anchor_lang` are being used?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `anchor_lang::ToAccountMetas`:\u001b[0m\n\u001b[0m              AccountLoader<'info, T>\u001b[0m\n\u001b[0m              AccountMeta\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              CreateNonceAccount<'info>\u001b[0m\n\u001b[0m              CreateNonceAccountWithSeed<'info>\u001b[0m\n\u001b[0m              Interface<'info, T>\u001b[0m\n\u001b[0m              InterfaceAccount<'info, T>\u001b[0m\n\u001b[0m              Option<T>\u001b[0m\n\u001b[0m            and 73 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `anchor_lang::context::CpiContext`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs:173:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CpiContext<'a, 'b, 'c, 'info, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ToAccountMetas + ToAccountInfos<'info>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CpiContext`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountInfos<'_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/instructions/deposit.rs","byte_start":1578,"byte_end":1955,"line_start":61,"line_end":69,"column_start":19,"column_end":6,"is_primary":true,"text":[{"text":"    let cpi_ctx = CpiContext::new_with_signer(","highlight_start":19,"highlight_end":47},{"text":"        ctx.accounts.compression_program.to_account_info(),","highlight_start":1,"highlight_end":60},{"text":"        spl_account_compression::cpi::accounts::Modify {","highlight_start":1,"highlight_end":57},{"text":"            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),","highlight_start":1,"highlight_end":69},{"text":"            authority: ctx.accounts.tree_authority.to_account_info(),","highlight_start":1,"highlight_end":70},{"text":"            noop: ctx.accounts.noop_program.to_account_info(),","highlight_start":1,"highlight_end":63},{"text":"        },","highlight_start":1,"highlight_end":11},{"text":"        &[],","highlight_start":1,"highlight_end":13},{"text":"    );","highlight_start":1,"highlight_end":6}],"label":"the trait `anchor_lang::ToAccountInfos<'_>` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"trait impl with same name found","code":null,"level":"help","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":true,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":4360,"byte_end":4368,"line_start":96,"line_end":96,"column_start":10,"column_end":18,"is_primary":false,"text":[{"text":"#[derive(Accounts)]","highlight_start":10,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(Accounts)]","def_site_span":{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-derive-accounts-0.29.0/src/lib.rs","byte_start":29231,"byte_end":29297,"line_start":633,"line_end":633,"column_start":1,"column_end":67,"is_primary":false,"text":[{"text":"pub fn derive_anchor_deserialize(item: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `anchor_lang` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the following other types implement trait `anchor_lang::ToAccountInfos<'info>`:\n  AccountLoader<'info, T>\n  Box<T>\n  CreateNonceAccount<'info>\n  CreateNonceAccountWithSeed<'info>\n  Interface<'info, T>\n  InterfaceAccount<'info, T>\n  Option<T>\n  Vec<T>\nand 50 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `anchor_lang::context::CpiContext`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5573,"byte_end":5583,"line_start":171,"line_end":171,"column_start":12,"column_end":22,"is_primary":false,"text":[{"text":"pub struct CpiContext<'a, 'b, 'c, 'info, T>","highlight_start":12,"highlight_end":22}],"label":"required by a bound in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5636,"byte_end":5657,"line_start":173,"line_end":173,"column_start":25,"column_end":46,"is_primary":true,"text":[{"text":"    T: ToAccountMetas + ToAccountInfos<'info>,","highlight_start":25,"highlight_end":46}],"label":"required by this bound in `CpiContext`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `spl_account_compression::cpi::accounts::Modify<'_>: anchor_lang::ToAccountInfos<'_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instructions/deposit.rs:61:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let cpi_ctx = CpiContext::new_with_signer(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m___________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ctx.accounts.compression_program.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        spl_account_compression::cpi::accounts::Modify {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            merkle_tree: ctx.accounts.merkle_tree.to_account_info(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &[],\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `anchor_lang::ToAccountInfos<'_>` is not implemented for `spl_account_compression::cpi::accounts::Modify<'_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: trait impl with same name found\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs:96:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[derive(Accounts)]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `anchor_lang` are being used?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `anchor_lang::ToAccountInfos<'info>`:\u001b[0m\n\u001b[0m              AccountLoader<'info, T>\u001b[0m\n\u001b[0m              Box<T>\u001b[0m\n\u001b[0m              CreateNonceAccount<'info>\u001b[0m\n\u001b[0m              CreateNonceAccountWithSeed<'info>\u001b[0m\n\u001b[0m              Interface<'info, T>\u001b[0m\n\u001b[0m              InterfaceAccount<'info, T>\u001b[0m\n\u001b[0m              Option<T>\u001b[0m\n\u001b[0m              Vec<T>\u001b[0m\n\u001b[0m            and 50 others\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `anchor_lang::context::CpiContext`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs:173:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CpiContext<'a, 'b, 'c, 'info, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mwhere\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    T: ToAccountMetas + ToAccountInfos<'info>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `CpiContext`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the derive macro `Accounts` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/instructions/deposit.rs","byte_start":1969,"byte_end":1976,"line_start":71,"line_end":71,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"    append(cpi_ctx, commitment).map_err(|e| {","highlight_start":12,"highlight_end":19}],"label":"expected `CpiContext<'_, '_, '_, '_, Modify<'_>>`, found a different `CpiContext<'_, '_, '_, '_, Modify<'_>>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/instructions/deposit.rs","byte_start":1962,"byte_end":1968,"line_start":71,"line_end":71,"column_start":5,"column_end":11,"is_primary":false,"text":[{"text":"    append(cpi_ctx, commitment).map_err(|e| {","highlight_start":5,"highlight_end":11}],"label":"arguments to this function are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`CpiContext<'_, '_, '_, '_, Modify<'_>>` and `CpiContext<'_, '_, '_, '_, Modify<'_>>` have similar names, but are actually distinct types","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`CpiContext<'_, '_, '_, '_, Modify<'_>>` is defined in crate `anchor_lang`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs","byte_start":5562,"byte_end":5605,"line_start":171,"line_end":171,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub struct CpiContext<'a, 'b, 'c, 'info, T>","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"`CpiContext<'_, '_, '_, '_, Modify<'_>>` is defined in crate `anchor_lang`","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.29.0/src/context.rs","byte_start":5562,"byte_end":5605,"line_start":171,"line_end":171,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"pub struct CpiContext<'a, 'b, 'c, 'info, T>","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"perhaps two different versions of crate `anchor_lang` are being used?","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"function defined here","code":null,"level":"note","spans":[{"file_name":"/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs","byte_start":15249,"byte_end":15255,"line_start":387,"line_end":387,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn append(ctx: Context<Modify>, leaf: [u8; 32]) -> Result<()> {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/instructions/deposit.rs:71:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    append(cpi_ctx, commitment).map_err(|e| {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `CpiContext<'_, '_, '_, '_, Modify<'_>>`, found a different `CpiContext<'_, '_, '_, '_, Modify<'_>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12marguments to this function are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `CpiContext<'_, '_, '_, '_, Modify<'_>>` and `CpiContext<'_, '_, '_, '_, Modify<'_>>` have similar names, but are actually distinct types\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `CpiContext<'_, '_, '_, '_, Modify<'_>>` is defined in crate `anchor_lang`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.30.1/src/context.rs:171:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CpiContext<'a, 'b, 'c, 'info, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: `CpiContext<'_, '_, '_, '_, Modify<'_>>` is defined in crate `anchor_lang`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anchor-lang-0.29.0/src/context.rs:171:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct CpiContext<'a, 'b, 'c, 'info, T>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: perhaps two different versions of crate `anchor_lang` are being used?\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: function defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/ubuntu/.cargo/registry/src/index.crates.io-6f17d22bba15001f/spl-account-compression-0.3.2/src/lib.rs:387:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m387\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn append(ctx: Context<Modify>, leaf: [u8; 32]) -> Result<()> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0308.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0308.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
